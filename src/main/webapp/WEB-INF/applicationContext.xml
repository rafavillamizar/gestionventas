<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

<!-- 	<import resource="classpath:millionmindclub-aspects.xml" /> -->
<!-- 	<import resource="classpath:millionmindclub-context.xml" /> -->
<!-- 	<import resource="classpath:millionmindclub-mail.xml" /> -->

	<!-- Configure annotated beans -->
    <context:annotation-config />
    <context:spring-configured />
    
    <mvc:annotation-driven />

	<context:component-scan base-package="com.rafavillamizar.gestionventas" />

<!--     <import resource="classpath:millionmindclub-security.xml" /> -->
<!-- 	<import resource="classpath:millionmindclub-flex.xml" /> -->

<!-- <context:component-scan base-package="com.businessinria.millionmindclub.controller" /> -->
<!--     <context:component-scan base-package="com.businessinria.millionmindclub.facades"> -->
<!--         <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
<!--     </context:component-scan> -->

<!-- 	 -->

<bean id="gestionVentasDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
	    <property name="url" value="jdbc:mysql://localhost:3306/gestionventas?autoReconnect=true"/>
	    <property name="username" value="gestionventas"/>
	    <property name="password" value=""/>
		<property name="validationQuery" value="select 1"/>
  	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="gestionVentasDataSource" />
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<property name="hibernateProperties">
			<props>
		        <prop key="show_sql">true</prop>
		        <prop key="format_sql">true</prop>
		        <prop key="use_sql_comments">true</prop>
		        <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
		        <prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop>
		        <prop key="hibernate.default_entity_mode">pojo</prop>
		        <prop key="hibernate.bytecode.use_reflection_optimizer">false</prop>
			</props>
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

<!-- <security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled"/> -->
	
<!--     <bean id="flexEntryPoint" class="org.springframework.flex.security3.FlexAuthenticationEntryPoint"/> -->
<!-- 	<bean id="restEntryPoint" class="com.businessinria.millionmindclub.infra.security.RestEntryPoint" /> -->

    <!--<security:http auto-config="true" entry-point-ref="flexEntryPoint">-->
    	<!--<security:anonymous enabled="false"/>-->
        <!--<security:intercept-url pattern="*.html" access="ROLE_USER"/>-->
 	<!--</security:http>-->

	<!-- Flex -->

    <!-- NUEVO -->

<!-- 	<security:http -->
<!-- 			use-expressions="true" -->
<!-- 			auto-config="false" -->
<!-- 			create-session="never" -->
<!-- 			entry-point-ref="delegatingAuthenticationEntryPoint"> -->
<!-- 		<security:custom-filter ref="authenticationTokenProcessingFilter" position="FORM_LOGIN_FILTER"/> -->
		
<!-- 		<security:intercept-url pattern="/rest/uploadeventprogram" access="permitAll" method="POST"/> -->
		
<!-- 		<security:intercept-url pattern="/rest/facebookcontacts" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/facebooktoken" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/countries" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/provinces" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/cities" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/genders" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/getuserlanguage" access="permitAll" method="POST"/> -->
<!-- 		<security:intercept-url pattern="/rest/register" access="permitAll" method="POST"/> -->
<!-- 		<security:intercept-url pattern="/rest/login" access="permitAll" method="POST"/> -->
<!-- 		<security:intercept-url pattern="/rest/activateUser" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/rememberPassword" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/changeEmail" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/disableAccount" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/reactivateAccount" access="permitAll" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/**" access="isAuthenticated()" method="GET"/> -->
<!-- 		<security:intercept-url pattern="/rest/**" access="isAuthenticated()" method="POST"/> -->
<!-- 		<security:intercept-url pattern="/rest/**" access="isAuthenticated()" method="PUT"/> -->
<!-- 		<security:intercept-url pattern="/rest/**" access="isAuthenticated()" method="DELETE"/> -->
<!-- 		<security:intercept-url pattern="/rest/**" access="isAuthenticated()" method="HEAD"/> -->
<!-- 	</security:http> -->

<!-- 	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter"> -->
<!-- 		<property name='securityContextRepository'> -->
<!-- 			<bean class='org.springframework.security.web.context.HttpSessionSecurityContextRepository'> -->
<!-- 				<property name='allowSessionCreation' value='false' /> -->
<!-- 			</bean> -->
<!-- 		</property> -->
<!-- 	</bean> -->

<!--     <bean id="authenticationTokenProcessingFilter" class="com.businessinria.millionmindclub.infra.security.AuthenticationTokenProcessingFilter" > -->
<!--         <constructor-arg ref="jdbcUserService" /> -->
<!--     </bean> -->

<!-- 	<bean id="delegatingAuthenticationEntryPoint" -->
<!-- 		  class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint"> -->
<!-- 		<constructor-arg> -->
<!-- 			<map> -->
<!-- 				<entry key="hasHeader('Content-Type','application/json;charset=UTF-8')" value-ref="restEntryPoint" /> -->
<!-- 			</map> -->
<!-- 		</constructor-arg> -->
<!-- 		<property name="defaultEntryPoint" ref="flexEntryPoint" /> -->
<!-- 	</bean> -->

<!-- NUEVO -->

<!--     ************************** -->

<!-- 	<security:authentication-manager alias="authenticationManager"> -->
<!-- 		<security:authentication-provider user-service-ref="jdbcUserService" /> -->
<!-- 	</security:authentication-manager> -->
	
<!-- 	<bean id="jdbcUserService" class="com.businessinria.millionmindclub.infra.security.CustomJdbcDaoImpl"> -->
<!-- 		<property name="dataSource" ref="millionMindClubDataSource"/> -->
<!-- 		<property name="usersByUsernameQuery"> -->
<!-- 			<value>SELECT email AS username, password as password, enabled as isEnabled, enabledState as enabledState, locale as locale FROM user WHERE email = ?</value> -->
<!-- 		</property> -->
<!-- 		<property name="authoritiesByUsernameQuery"> -->
<!-- 			<value>select username, -->
<!--  	                      case when roleKey like 'ROLE_ADMIN' then 'ROLE_ADMIN' -->
<!--  	                      	   when roleKey like 'ROLE_ORGANIZER_CM' then 'ROLE_ORGANIZER_CM' -->
<!-- 					           when roleKey like 'ROLE_ORGANIZER' then 'ROLE_ORGANIZER' -->
<!-- 					           when roleKey like 'ROLE_TRAINER_CM' then 'ROLE_TRAINER_CM' -->
<!-- 					           when roleKey like 'ROLE_TRAINER' then 'ROLE_TRAINER' -->
<!-- 					           when roleKey like 'ROLE_USER' then 'ROLE_USER' -->
<!-- 					       end as authority -->
<!-- 					  from roles  -->
<!-- 					 WHERE username = ?</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->

</beans>